// -*- mode: js2 -*-
// MJR - Conkeror rc file
//

//set_user_agent("Mozilla/5.0 (iPad; U; CPU OS 2_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10");

homepage                     = "www.google.com/reader";
url_completion_use_bookmarks = false;
url_completion_use_history   = true;
url_remoting_fn              = load_url_in_new_buffer;
editor_shell_command         = 'emacsclient -c';

// font prefs
session_pref("font.FreeType2.enable",          true);
session_pref("font.minimum-size.x-western",    14);
session_pref("browser.display.use_document_fonts", 1);
session_pref('browser.history_expire_days', 1);

// session_pref("font.default.x-western",         "Inconsolata");
// session_pref("font.name.monospace.x-western",  "Inconsolata");
// session_pref("font.name.sans-serif.x-western", "Inconsolata");
// session_pref("font.name.serif.x-western",      "Inconsolata");

// keymapping
define_key(default_global_keymap, "C-x C-m",   "execute-extended-command");
define_key(default_global_keymap, "C-x C-g",   "find-alternate-url");
define_key(default_global_keymap, "C-x ]",     "cmd_scrollBottom");
define_key(default_global_keymap, "C-x [",     "cmd_scrollTop");
define_key(default_global_keymap, "C-x p",     "buffer-previous");
define_key(default_global_keymap, "C-x n",     "buffer-next");
define_key(default_global_keymap, "C-x space", "buffer-next");

// web jumps
define_webjump("s24su",         "http://www.s24su.com");
define_webjump("bladesmad",     "http://boards.footymad.net/forum.php?tno=463");
define_webjump("mad",           "http://boards.footymad.net/forum.php?tno=463");
define_webjump("news-now-sufc", "http://www.newsnow.co.uk/h/?JavaScript=1&search=sheffield+united");
define_webjump("bbc-football",  "http://www.bbc.co.uk/football");
define_webjump("hackernews",    "http://news.ycombinator.org");
define_webjump("stumpwm-man",   "http://www.nongnu.org/stumpwm/manual/stumpwm.html");
define_webjump("g",             "http://www.google.com/search?q=%s");
define_webjump("practical-cl",  "http://gigamonkeys.com/book/");
define_webjump("twitter",       "http://www.twitter.com/");
define_webjump("eurogamer",     "http://www.eurogamer.net/");
define_webjump("c-and-vg",      "http://www.computerandvideogames.com/");
define_webjump("gmail",         "http://www.gmail.com/");
define_webjump("greader",       "http://www.google.com/reader");
define_webjump("git-help",      "http://jonas.nitro.dk/git/quick-reference.html");
define_webjump("git-help-svg",  "http://ktown.kde.org/~zrusin/git/git-cheat-sheet.svg");
define_webjump("perlmonks",     "http://www.perlmonks.org");
define_webjump("twitsch",       "http://search.twitter.com/search?q=%s");
define_webjump("facebook",      "http://www.facebook.com");
define_webjump("smokeping",     "http://192.168.1.66/cgi-bin/smokeping.cgi");

// emacs webjumps
define_webjump("emacswiki",
    "http://www.google.com/cse?cx=004774160799092323420%3A6-ff2s0o6yi"+
            "&q=%s&sa=Search&siteurl=emacswiki.org%2F",
            $alternative="http://www.emacswiki.org/");

// perl webjumps
define_webjump("perldoc", "http://perldoc.perl.org/search.html?q=%s");
define_webjump("cpan", "http://search.cpan.org/search?query=%s&mode=all");

// java webjumps
define_webjump("j6-api",        "http://www.google.com/search?q=%s&q=%20site%3Ajava.sun.com%2Fjavase%2F6%2Fdocs%2Fapi");

// debian webjumps
define_webjump("deb",     "http://packages.debian.org/search?keywords=%s&searchon=names&suite=unstable&section=all");
define_webjump("debfile", "http://packages.debian.org/search?searchon=contents&keywords=%s&mode=path&suite=unstable&arch=any");
define_webjump("debbugs", "http://bugs.debian.org/%s");
define_webjump("debpts",  "http://packages.qa.debian.org/%s");

// command line webjumps
define_webjump("commandlinefu", 
    function(term) {
        return 'http://www.commandlinefu.com/commands/matching/' +
            term.replace(/[^a-zA-Z0-9_\-]/g, '')
                .replace(/[\s\-]+/g, '-') +
            '/' + btoa(term);
    },
    $argument = 'optional',
    $alternative = "http://www.commandlinefu.com/");


// buffer switching
require("clicks-in-new-buffer.js");
clicks_in_new_buffer_button = 2;
  define_key(content_buffer_normal_keymap, "d", "follow-new-buffer");

// reload conkerorrc
interactive( "reload-rc", "Reload the Conkerorrc.", function(I) {
  load_rc_file("/home/mryall/.conkerorrc"); });

// tabs
require("new-tabs.js");

// number row switches buffers
function define_key_buffer_switch(key, buf_num) {
  define_key(content_buffer_normal_keymap, key, function (I) {
    switch_to_buffer(I.window, I.window.buffers.get_buffer(buf_num));
  });
}

for (let i = 0; i < 10; ++i){
  define_key_buffer_switch(i == 9 ? "0" : (i+1).toString(), i);
}

// password management
session_pref("signon.rememberSignons", true);
session_pref("signon.expireMasterPassword", false);
session_pref("signon.SignonFileName", "signons.txt");

  Components.classes["@mozilla.org/login-manager;1"]
  .getService(Components.interfaces.nsILoginManager);


// MozRepl
if ('@hyperstruct.net/mozlab/mozrepl;1' in Cc)
{
  var mozrepl = Cc['@hyperstruct.net/mozlab/mozrepl;1']
    .getService(Ci.nsIMozRepl);
  if (! mozrepl.isActive())
    mozrepl.start(4242);
}


//set the proxy server for this session only
var proxy_server_default = "";
var proxy_port_default   = 8080;

function set_proxy_values (server, port) {
   
    session_pref ('network.proxy.ftp',    server);
    session_pref ('network.proxy.gopher', server);
    session_pref ('network.proxy.http',   server);
    session_pref ('network.proxy.socks',  server);
    session_pref ('network.proxy.ssl',    server);
    
    session_pref ('network.proxy.ftp_port',    port);
    session_pref ('network.proxy.gopher_port', port);
    session_pref ('network.proxy.http_port',   port);
    session_pref ('network.proxy.socks_port',  port);
    session_pref ('network.proxy.ssl_port',    port);
    
    session_pref ('network.proxy.share_proxy_settings', 'true');
    session_pref ('network.proxy.type', 1);
}

function set_proxy_session (window, server, port) {

    if (server == "N") {
        session_pref ('network.proxy.type', 0); //direct connection
        window.minibuffer.message ("Direction connection to the internet enabled for this session");
    } else {

        if (server == "") server = proxy_server_default;
        if (isNaN(port))  port   = proxy_port_default;

        set_proxy_values(server, port);
        window.minibuffer.message ("All protocols using "+server+":"+port+" for this session");
    }
}

interactive ("set-proxy-gp", "Use Glynn's box as a proxy",
             function(I) { set_proxy_session( I.window,
                                              proxy_server_gp, 
                                              proxy_port_gp) });

// default to proxy
// set_proxy_values(proxy_server_default, proxy_port_default);

interactive ("set-proxy-session", "set the proxy server for all protocols for this session only",
    function (I) {
        set_proxy_session (
            I.window,
            (yield I.minibuffer.read ($prompt = "server ["+proxy_server_default+"] or N: ")),
            parseInt((yield I.minibuffer.read ($prompt = "port ["+proxy_port_default+"]: "))))
    });

register_user_stylesheet(
    "data:text/css,"+
        escape("@namespace url(\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\");\n"+
               "#minibuffer, .mode-line, .tab2-label, tree.completions {"+
               " font-family: liberation sans;"+
               " font-size: 12px;"+
               " font-weight: bold;"+
               "}\n"+
               "#minibuffer-prompt { color: #000000; }"));

/* Save my eyes type functions */
function darken_page (I) {
    var newSS, styles='* { background: black ! important; color: #66CDAA ! important; }'
        + ':link, :link * { color: #4986dd !important }'
        + ':visited, :visited * { color: #d75047 !important }'
        + 'div * { border-color: #333333 !important }';

    var document = I.window.buffers.current.document;

    if (document.createStyleSheet) {
        document.createStyleSheet("javascript:'" + styles + "'");
    }
    else {
        newSS=document.createElement('link');
        newSS.rel='stylesheet';
        newSS.href='data:text/css,'+escape(styles);
        document.getElementsByTagName("head")[0].appendChild(newSS);
    }
}

function darkus () {
    add_hook("content_buffer_finished_loading_hook", 
             darken_page, 
             true,
             false);
}

function lightus () {
    remove_hook("content_buffer_finished_loading_hook", 
                darken_page);
}

/* Interactive save my eyes commands */
interactive("dark-hook", 
            "Darken the page in an attempt to save your eyes.",
            darkus);

interactive("light-hook", 
            "Let there be light!",
            lightus);

interactive("darken-page", 
            "Darken the page in an attempt to save your eyes.",
            darken_page);

{ 
    var fs = 12

    function lower_min_text_size (mb) {
        fs = fs - 2;
        session_pref("font.minimum-size.x-western",  fs);
        session_pref("font.size.variable.x-western", fs);
        mb.message("font size: " + fs);
    }

    function raise_min_text_size (mb) {
        fs = fs + 2;
        session_pref("font.minimum-size.x-western",  fs);
        session_pref("font.size.variable.x-western", fs);
        mb.message("font size: " + fs);
    }
}

interactive("lower_text_size", 
            "Reduce the minimum text size.",
            function (I) { lower_min_text_size(I.window.minibuffer) } );

interactive("raise_text_size", 
            "Raise the minimum text size.",
            function (I) { raise_min_text_size(I.window.minibuffer) } );

function disable_scrollbars (buffer) {
    buffer.browser.contentWindow.scrollbars.visible = false;
}

interactive("no-scrollbars", 
            "Remove the scrollbars.",
            function (I) { disable_scrollbars(I.buffer) } );


// firebug
define_variable("firebug_url",
    "http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js");

function firebug (I) {
    var doc = I.buffer.document;
    var script = doc.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', firebug_url);
    script.setAttribute('onload', 'firebug.init();');
    doc.body.appendChild(script);
}
interactive("firebug", "open firebug lite", firebug);

// ask before closing window
add_hook("window_before_close_hook",
         function () {
             var w = get_recent_conkeror_window();
             var result = (w == null) ||
                 "y" == (yield w.minibuffer.read_single_character_option(
                     $prompt = "Quit Conkeror? (y/n)",
                     $options = ["y", "n"]));
             yield co_return(result);
         });

interactive("instapaper", "Send the current page to InstaPaper.",
            function (I) {
                check_buffer(I.buffer, content_buffer);
                let posturl = 'https://www.instapaper.com/api/add?' +
        'username=matt.ryall@gmail.com&' +
        'password=matt1943&url=' +
                    encodeURIComponent(I.window.content.location.href)
                    '&selection=' +
                    encodeURIComponent(
                        yield I.minibuffer.read(
                            $prompt = "Description (optional): "));
                try {
            var content = yield send_http_request(load_spec({uri: posturl}));
            if (content.responseText == "201") {
               I.window.minibuffer.message("InstaPaper ok!");
            } else {
               I.window.minibuffer.message("Error.");
            }
                } catch (e) { 
                    I.window.minibuffer.message("Error.");
        }
        });

// Instapaper
interactive("instapaper-link", "Send the current link to InstaPaper.",
            function (I) {
              bo = yield read_browser_object(I) ;
              mylink = load_spec_uri_string(load_spec(encodeURIComponent(bo)));
              check_buffer(I.buffer, content_buffer);
              let posturl = 'https://www.instapaper.com/api/add?' +
                            'username=matt.ryall@gmail.com&' +
                            'password=matt1943&url=' + mylink +
                '&title=' + encodeURIComponent(
                                  yield I.minibuffer.read(
                                  $prompt = "Title (optional): ",
                  $initial_value = bo.textContent)) +
                            '&selection=' + encodeURIComponent(
                                  yield I.minibuffer.read(
                                  $prompt = "Description (optional): ",
                  $initial_value = "From: "+ I.buffer.title +" ("+I.window.content.location.href+")"
));
                try {
            var content = yield send_http_request(load_spec({uri: posturl}));
            if (content.responseText == "201") {
               I.window.minibuffer.message("InstaPaper ok!");
            } else {
               I.window.minibuffer.message("Error.");
            }
                } catch (e) { 
                    I.window.minibuffer.message("Error.");
        }
            }, $browser_object = browser_object_links);

define_key(default_global_keymap, "C-x i", "instapaper");
define_key(default_global_keymap, "C-x I", "instapaper-link");
